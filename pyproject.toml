[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "automl-mini"
version = "1.0.0"
description = "A simplified automated machine learning library focusing on core functionality"
readme = "README.md"
requires-python = ">=3.8.1"
license = {text = "MIT"}
authors = [
    {name = "AutoML Mini Team", email = "team@automl-mini.com"},
]
maintainers = [
    {name = "AutoML Mini Team", email = "team@automl-mini.com"},
]
keywords = [
    "machine-learning",
    "automl",
    "automated-machine-learning",
    "data-science",
    "preprocessing",
    "model-selection",
    "scikit-learn",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0; python_version>='3.8.1'",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
all = [
    "automl-mini[dev,docs]",
]

[project.urls]
Homepage = "https://github.com/alakob/autoML_mini"
Repository = "https://github.com/alakob/autoML_mini"
Documentation = "https://automl-mini.readthedocs.io/"
"Bug Reports" = "https://github.com/alakob/autoML_mini/issues"
Changelog = "https://github.com/alakob/autoML_mini/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "scipy.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (modern, fast linter)
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "B007",  # loop control variable not used within loop body
]
unfixable = [
    "F841",  # unused variables
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]
"__init__.py" = ["F401"]
"examples/**/*" = ["E402"]  # Allow imports after sys.path modification

[tool.ruff.lint.isort]
known-first-party = ["automl_mini"]

[tool.ruff.lint.flake8-type-checking]
strict = true

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
